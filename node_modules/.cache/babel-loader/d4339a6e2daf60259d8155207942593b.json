{"ast":null,"code":"var _jsxFileName = \"/Users/nando/data_science_dashboard/data_science_projects/src/core/topicDialog/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Box, Dialog, AppBar, Toolbar, Grid, IconButton, List, ListItem, ListItemText, Divider, Slide, Button, Typography, makeStyles } from '@material-ui/core';\nimport AboutProject from '../aboutProject';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ProjectCard from '../projectCard';\nimport { projectsCardCNN, projectsCardANN, projectsCardDEP, projectsCardSM, projectsCardML } from './projectCardData';\nconst gitHubCNN = \"https://github.com/fwbrandao/Deep_Learning/tree/master/Convolutional_Neural_Networks\";\nconst gitHubANN = \"https://github.com/fwbrandao/Deep_Learning/tree/master/Neural%20Networks%20and%20Deep%20Learning/Week_2\";\nconst gitHubDEP = \"https://github.com/fwbrandao/Covid-19_disease_analysis\";\nconst gitHubSM = '';\nconst gitHubML = '';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    position: 'relative'\n  },\n  titles: {\n    flex: 1\n  },\n  projectCard: {\n    display: 'flex',\n    flexGrow: 1,\n    backgroundColor: theme.palette.backgroundColor.color,\n    paddingBottom: theme.spacing(2)\n  },\n  gridItem: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  intro: {\n    marginLeft: theme.spacing(1)\n  },\n  aboutProject: {\n    backgroundColor: theme.palette.backgroundColor.color\n  }\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return /*#__PURE__*/React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }\n  }));\n});\n\nconst TopicDialog = ({\n  open,\n  closeDialog,\n  topicData\n}) => {\n  const classes = useStyles();\n  const [projectCard, setProjectCard] = useState([]);\n  const [gitHubForTopic, setGitHubForTopic] = useState([]);\n  useEffect(() => {\n    if (topicData.id === 'CNN') {\n      setProjectCard(projectsCardCNN);\n      setGitHubForTopic(gitHubCNN);\n    }\n\n    if (topicData.id === 'ANN') {\n      setProjectCard(projectsCardANN);\n      setGitHubForTopic(gitHubANN);\n    }\n\n    if (topicData.id === 'DEP') {\n      setProjectCard(projectsCardDEP);\n      setGitHubForTopic(gitHubDEP);\n    }\n\n    if (topicData.id === 'SM') {\n      setProjectCard(projectsCardSM);\n      setGitHubForTopic(gitHubSM);\n    }\n\n    if (topicData.id === 'ML') {\n      setProjectCard(projectsCardML);\n      setGitHubForTopic(gitHubML);\n    }\n  }, [projectCard, topicData.id]);\n  return /*#__PURE__*/React.createElement(Dialog, {\n    fullScreen: true,\n    open: open,\n    onClose: closeDialog,\n    TransitionComponent: Transition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    className: classes.appBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.titles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, topicData.topicTitle), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    onClick: closeDialog,\n    \"aria-label\": \"close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Box, {\n    pb: 2,\n    className: classes.aboutProject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AboutProject, {\n    description: topicData.topicIntro === '' ? 'Comming Soon.' : topicData.topicIntro,\n    gitHubLink: gitHubForTopic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    className: classes.projectCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, projectCard.map(item => /*#__PURE__*/React.createElement(Grid, {\n    className: classes.gridItem,\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ProjectCard, {\n    data: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }\n  }))))));\n};\n\nexport default TopicDialog;","map":{"version":3,"sources":["/Users/nando/data_science_dashboard/data_science_projects/src/core/topicDialog/index.jsx"],"names":["React","useState","useEffect","Box","Dialog","AppBar","Toolbar","Grid","IconButton","List","ListItem","ListItemText","Divider","Slide","Button","Typography","makeStyles","AboutProject","CloseIcon","ProjectCard","projectsCardCNN","projectsCardANN","projectsCardDEP","projectsCardSM","projectsCardML","gitHubCNN","gitHubANN","gitHubDEP","gitHubSM","gitHubML","useStyles","theme","appBar","position","titles","flex","projectCard","display","flexGrow","backgroundColor","palette","color","paddingBottom","spacing","gridItem","justifyContent","intro","marginLeft","aboutProject","Transition","forwardRef","props","ref","TopicDialog","open","closeDialog","topicData","classes","setProjectCard","gitHubForTopic","setGitHubForTopic","id","topicTitle","topicIntro","map","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Box,\n    Dialog,\n    AppBar,\n    Toolbar,\n    Grid,\n    IconButton,\n    List,\n    ListItem,\n    ListItemText,\n    Divider,\n    Slide,\n    Button,\n    Typography,\n    makeStyles,\n} from '@material-ui/core';\nimport AboutProject from '../aboutProject';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ProjectCard from '../projectCard';\nimport { \n    projectsCardCNN ,\n    projectsCardANN,\n    projectsCardDEP,\n    projectsCardSM,\n    projectsCardML,\n} from './projectCardData';\n\nconst gitHubCNN = \"https://github.com/fwbrandao/Deep_Learning/tree/master/Convolutional_Neural_Networks\";\nconst gitHubANN = \"https://github.com/fwbrandao/Deep_Learning/tree/master/Neural%20Networks%20and%20Deep%20Learning/Week_2\";\nconst gitHubDEP = \"https://github.com/fwbrandao/Covid-19_disease_analysis\";\nconst gitHubSM = '';\nconst gitHubML = '';\n\nconst useStyles = makeStyles(theme => ({\n      appBar: {\n        position: 'relative',\n      },\n      titles: {\n        flex: 1,\n      },\n      projectCard: {\n        display: 'flex',\n        flexGrow: 1,\n        backgroundColor: theme.palette.backgroundColor.color,\n        paddingBottom: theme.spacing(2),\n      },\n      gridItem: {\n        display: 'flex',\n        justifyContent: 'center',\n      },\n      intro: {\n        marginLeft: theme.spacing(1),\n      },\n      aboutProject: {\n        backgroundColor: theme.palette.backgroundColor.color\n      }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nconst TopicDialog = ({ open, closeDialog, topicData }) => {\n    const classes = useStyles();\n    const [projectCard, setProjectCard] = useState([]);\n    const [gitHubForTopic, setGitHubForTopic] = useState([]);\n\n\n    useEffect(() => {\n        if (topicData.id === 'CNN') {\n            setProjectCard(projectsCardCNN);\n            setGitHubForTopic(gitHubCNN);\n        }\n        if (topicData.id === 'ANN') {\n            setProjectCard(projectsCardANN);\n            setGitHubForTopic(gitHubANN);\n        }\n        if (topicData.id === 'DEP') {\n            setProjectCard(projectsCardDEP);\n            setGitHubForTopic(gitHubDEP);\n        }\n        if (topicData.id === 'SM') {\n            setProjectCard(projectsCardSM);\n            setGitHubForTopic(gitHubSM);\n        }\n        if (topicData.id === 'ML') {\n            setProjectCard(projectsCardML);\n            setGitHubForTopic(gitHubML);\n        }\n    },[projectCard, topicData.id]);\n\n    return (\n        <Dialog fullScreen open={open} onClose={closeDialog} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.titles}>\n                        {topicData.topicTitle}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={closeDialog} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Box pb={2} className={classes.aboutProject}>\n                <AboutProject\n                    description={topicData.topicIntro === '' ? 'Comming Soon.' : topicData.topicIntro}\n                    gitHubLink={gitHubForTopic}\n                />\n            </Box>\n            <Box className={classes.projectCard}>\n                <Grid container spacing={3}>\n                    {projectCard.map(item => (\n                        <Grid className={classes.gridItem} item xs={6}>\n                            <ProjectCard data={item}/>\n                        </Grid>\n                    ))}\n                </Grid>\n            </Box>\n        </Dialog>\n    )\n}\n\nexport default TopicDialog;\n"]},"metadata":{},"sourceType":"module"}