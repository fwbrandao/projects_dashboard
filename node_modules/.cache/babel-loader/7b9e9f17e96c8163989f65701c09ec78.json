{"ast":null,"code":"var _jsxFileName = \"/Users/nando/data_science_dashboard/data_science_projects/src/components/projects/fakeNewsDetector/main/index.jsx\";\nimport React, { useState } from 'react';\nimport { Box, Button, makeStyles, Typography, Link } from '@material-ui/core';\nimport NavBar from '../../../../core/navBar/index';\nimport AboutProject from '../../../../core/aboutProject/index';\nimport TextBox from '../../../../core/textBox/index';\nimport ControlledExpansionPanels from '../../../../core/infoExpansionPanel/index';\nimport HowIDidIt from '../../../../core/howIDidIt';\nimport Steppers from '../../../../core/stepper';\nimport grey from '@material-ui/core/colors/grey';\nimport CodeScreenshot from '../../../../core/codeScreenshot';\nimport Fake_print_head from '../../../../images/fake_print_head.jpg';\nimport Label from '../../../../images/label.jpg';\nimport Accuracy from '../../../../images/accuracy.jpg';\nconst useStyles = makeStyles(theme => ({\n  howIDidIt: {\n    backgroundColor: grey[100]\n  },\n  trainingModel: {\n    fontSize: 18,\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  toolbar: theme.mixins.toolbar,\n  controlledExpansionPanels: {\n    backgroundColor: theme.palette.primary.main\n  }\n}));\n\nconst FakeNewsDetector = () => {\n  const classes = useStyles();\n  const [toggledInfo, setToggledInfo] = useState(false); // const [toggledSubimit, setToggledSubmit] = useState(false);\n\n  const handleToggleInfo = () => setToggledInfo(!toggledInfo); // const handleToggleSubmit = () => setToggledSubmit(!toggledSubimit);\n\n\n  const link = /*#__PURE__*/React.createElement(Link, {\n    href: \"https://drive.google.com/file/d/1er9NJTLUA3qnRuyhfzuN0XUsoIC4a-_q/view\",\n    target: \"_blank\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 18\n    }\n  }, \"download the data here\");\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AboutProject, {\n    title: \"Fake News Detector\",\n    description: \"This advanced python project of detecting fake news deals with fake and real news. Using sklearn, I've built a TfidfVectorizer on a dataset. Then, I initialize a PassiveAggressive Classifier and fit the model. In the end, the accuracy score and the confusion matrix tell us how well our model fares.\",\n    gitHubLink: \"https://github.com/fwbrandao/Fake_news_detector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mt: 4,\n    ml: 18,\n    mr: 18,\n    mb: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ControlledExpansionPanels, {\n    className: classes.controlledExpansionPanels,\n    firstHeader: \"What is a PassiveAggressiveClassifier?\",\n    firstText: \"Passive Aggressive algorithms are online learning algorithms. Such an algorithm remains passive for a correct classification outcome, and turns aggressive in the event of a miscalculation, updating and adjusting. Unlike most other algorithms, it does not converge. Its purpose is to make updates that correct the loss, causing very little change in the norm of the weight vector.\",\n    secondHeader: \"What is a TfidfVectorizer?\",\n    secondText: \"TF (Term Frequency): The number of times a word appears in a document is its Term Frequency. A higher value means a term appears more often than others, and so, the document is a good match when the term is part of the search terms. IDF (Inverse Document Frequency): Words that occur many times a document, but also occur many times in many others, may be irrelevant. IDF is a measure of how significant a term is in the entire corpus. The TfidfVectorizer converts a collection of raw documents into a matrix of TF-IDF features.\",\n    thirdHeader: \"What is Fake News?\",\n    thirdText: \"A type of yellow journalism, fake news encapsulates pieces of news that may be hoaxes and is generally spread through social media and other online media. This is often done to further or impose certain ideas and is often achieved with political agendas. Such news items may contain false and/or exaggerated claims, and may end up being viralized by algorithms, and users may end up in a filter bubble.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mt: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    color: \"inherit\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Try youself by adding any news in the text box then press next.\")), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Steppers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Box, {\n    pt: 2,\n    className: classes.howIDidIt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"inherit\",\n    gutterBottom: true,\n    className: classes.trainingModel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Training the model\"), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"The data\",\n    description: \"The dataset we\\u2019ll use for this python project- we\\u2019ll call it news.csv. This dataset has a shape of 7796\\xD74. The first column identifies the news, the second and third are the title and text, and the fourth column has labels denoting whether the news is REAL or FAKE. The dataset takes up 29.2MB of space and you can find in the link bellow.\",\n    link: link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Prerequisites\",\n    description: \"You\\u2019ll need to install the following libraries with pip and install Jupyter Lab to run your code\",\n    code: \"pip install numpy pandas sklearn \",\n    code2: \"pip install jupyter lab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Make necessary imports:\",\n    code: \"import numpy as np\",\n    code2: \"import pandas as pd\",\n    code3: \"import itertools\",\n    code4: \"from sklearn.model_selection import train_test_split\",\n    code5: \"from sklearn.feature_extraction.text import TfidfVectorizer\",\n    code6: \"from sklearn.linear_model import PassiveAggressiveClassifier\",\n    code7: \"from sklearn.metrics import accuracy_score, confusion_matrix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Read the data into a DataFrame\",\n    code: \"df=pd.read_csv('./data/news.csv')\",\n    code2: \"df.shape\",\n    code3: \"df.head()\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CodeScreenshot, {\n    image: Fake_print_head,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Get the labels from the DataFrame\",\n    code: \"labels=df.label\",\n    code2: \"labels.head()\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CodeScreenshot, {\n    image: Label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Split the dataset into training and testing sets.\",\n    code: \"x_train,x_test,y_train,y_test=train_test_split(df['text'], labels, test_size=0.2, random_state=7)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Let\\u2019s initialize a TfidfVectorizer with stop words from the English language and a maximum document frequency of 0.7 (terms with a higher document frequency will be discarded). Stop words are the most common words in a language that are to be filtered out before processing the natural language data. And a TfidfVectorizer turns a collection of raw documents into a matrix of TF-IDF features.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Now, fit and transform the vectorizer on the train set, and transform the vectorizer on the test set\",\n    code: \"tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)\",\n    code2: \"tfidf_train=tfidf_vectorizer.fit_transform(x_train)\",\n    code3: \"tfidf_test=tfidf_vectorizer.transform(x_test)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"Next, we\\u2019ll initialize a PassiveAggressiveClassifier. We\\u2019ll fit this on tfidf_train and y_train. Then, we\\u2019ll predict on the test set from the TfidfVectorizer and calculate the accuracy with accuracy_score() from sklearn.metrics.\",\n    code: \"pac=PassiveAggressiveClassifier(max_iter=50)\",\n    code2: \"pac.fit(tfidf_train,y_train)\",\n    code3: \"y_pred=pac.predict(tfidf_test)\",\n    code4: \"score=accuracy_score(y_test,y_pred)\",\n    code5: \"print(f'Accuracy: {round(score*100,2)}%')\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HowIDidIt, {\n    title: \"We got an accuracy of 92.74% with this model. Finally, let\\u2019s print out a confusion matrix to gain insight into the number of false and true negatives and positives.\",\n    code: \"confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CodeScreenshot, {\n    m: 10,\n    image: Accuracy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default FakeNewsDetector;","map":{"version":3,"sources":["/Users/nando/data_science_dashboard/data_science_projects/src/components/projects/fakeNewsDetector/main/index.jsx"],"names":["React","useState","Box","Button","makeStyles","Typography","Link","NavBar","AboutProject","TextBox","ControlledExpansionPanels","HowIDidIt","Steppers","grey","CodeScreenshot","Fake_print_head","Label","Accuracy","useStyles","theme","howIDidIt","backgroundColor","trainingModel","fontSize","display","justifyContent","toolbar","mixins","controlledExpansionPanels","palette","primary","main","FakeNewsDetector","classes","toggledInfo","setToggledInfo","handleToggleInfo","link"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Box, Button, makeStyles, Typography, Link } from '@material-ui/core';\nimport NavBar from '../../../../core/navBar/index';\nimport AboutProject from '../../../../core/aboutProject/index';\nimport TextBox from '../../../../core/textBox/index';\nimport ControlledExpansionPanels from '../../../../core/infoExpansionPanel/index';\nimport HowIDidIt from '../../../../core/howIDidIt';\nimport Steppers from '../../../../core/stepper';\nimport grey from '@material-ui/core/colors/grey';\nimport CodeScreenshot from '../../../../core/codeScreenshot';\nimport Fake_print_head from '../../../../images/fake_print_head.jpg';\nimport Label from '../../../../images/label.jpg';\nimport Accuracy from '../../../../images/accuracy.jpg'\n\nconst useStyles = makeStyles((theme) => ({\n    howIDidIt: {\n        backgroundColor: grey[100]\n    },\n    trainingModel: {\n        fontSize: 18,\n        display: \"flex\",\n        justifyContent: \"center\"\n    },\n    toolbar: theme.mixins.toolbar,\n    controlledExpansionPanels: {\n        backgroundColor: theme.palette.primary.main\n    }\n}));\n\nconst FakeNewsDetector = () => {\n    const classes = useStyles();\n    const [toggledInfo, setToggledInfo] = useState(false);\n    // const [toggledSubimit, setToggledSubmit] = useState(false);\n\n    const handleToggleInfo = () => setToggledInfo(!toggledInfo);\n    // const handleToggleSubmit = () => setToggledSubmit(!toggledSubimit);\n\n    const link = <Link\n        href=\"https://drive.google.com/file/d/1er9NJTLUA3qnRuyhfzuN0XUsoIC4a-_q/view\"\n        target=\"_blank\"\n        color=\"secondary\"\n    >\n        download the data here\n    </Link>\n\n    return (\n        <Box>\n            <NavBar />\n            <div className={classes.toolbar} />\n            <AboutProject\n                title=\"Fake News Detector\"\n                description=\"This advanced python project of detecting fake news deals with fake and real news.\n                Using sklearn, I've built a TfidfVectorizer on a dataset.\n                Then, I initialize a PassiveAggressive Classifier and fit the model. In the end,\n                the accuracy score and the confusion matrix tell us how well our model fares.\"\n                gitHubLink=\"https://github.com/fwbrandao/Fake_news_detector\"\n            />\n            <Box mt={4} ml={18} mr={18} mb={2}>\n                {/* <Box mb={2}>\n                    <Button\n                        size=\"small\"\n                        onClick={handleToggleInfo}\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        {!toggledInfo ? 'Project info' : 'Close info'}\n                    </Button>\n                </Box> */}\n                <ControlledExpansionPanels\n                    className={classes.controlledExpansionPanels}\n                    firstHeader='What is a PassiveAggressiveClassifier?'\n                    firstText='Passive Aggressive algorithms are online learning algorithms.\n                Such an algorithm remains passive for a correct classification outcome,\n                and turns aggressive in the event of a miscalculation, updating and adjusting.\n                Unlike most other algorithms, it does not converge.\n                Its purpose is to make updates that correct the loss,\n                causing very little change in the norm of the weight vector.'\n                    secondHeader='What is a TfidfVectorizer?'\n                    secondText='TF (Term Frequency): The number of times a word appears in a document is its Term Frequency.\n                A higher value means a term appears more often than others, and so,\n                the document is a good match when the term is part of the search terms.\n                IDF (Inverse Document Frequency): Words that occur many times a document,\n                but also occur many times in many others, may be irrelevant.\n                IDF is a measure of how significant a term is in the entire corpus.\n                The TfidfVectorizer converts a collection of raw documents into a matrix of TF-IDF features.'\n                    thirdHeader='What is Fake News?'\n                    thirdText='A type of yellow journalism,\n                fake news encapsulates pieces of news that may be hoaxes and is generally spread through social media and other online media.\n                This is often done to further or impose certain ideas and is often achieved with political agendas.\n                Such news items may contain false and/or exaggerated claims, and may end up being viralized by algorithms,\n                and users may end up in a filter bubble.'\n                />\n\n                <Box mt={6}>\n                    <Typography\n                        variant=\"body1\"\n                        color=\"inherit\"\n                        component=\"p\"\n                    >Try youself by adding any news in the text box then press next.</Typography>\n                </Box>\n                <Box mt={2}>\n                    <TextBox />\n                    <Steppers />\n                </Box>\n            </Box>\n            <Box pt={2} className={classes.howIDidIt}>\n                <Typography\n                    variant=\"h5\"\n                    color=\"inherit\"\n                    gutterBottom\n                    className={classes.trainingModel}\n                >\n                    Training the model\n                </Typography>\n                <HowIDidIt\n                    title=\"The data\"\n                    description=\"The dataset we’ll use for this python project- we’ll call it news.csv.\n                    This dataset has a shape of 7796×4. The first column identifies the news,\n                    the second and third are the title and text,\n                    and the fourth column has labels denoting whether the news is REAL or FAKE.\n                    The dataset takes up 29.2MB of space and you can find in the link bellow.\"\n                    link={link}\n                />\n                <HowIDidIt\n                    title=\"Prerequisites\"\n                    description=\"You’ll need to install the following libraries with pip and install Jupyter Lab to run your code\"\n                    code=\"pip install numpy pandas sklearn \"\n                    code2=\"pip install jupyter lab\"\n                />\n                <HowIDidIt\n                    title=\"Make necessary imports:\"\n                    code=\"import numpy as np\"\n                    code2=\"import pandas as pd\"\n                    code3=\"import itertools\"\n                    code4=\"from sklearn.model_selection import train_test_split\"\n                    code5=\"from sklearn.feature_extraction.text import TfidfVectorizer\"\n                    code6=\"from sklearn.linear_model import PassiveAggressiveClassifier\"\n                    code7=\"from sklearn.metrics import accuracy_score, confusion_matrix\"\n                />\n                <HowIDidIt\n                    title=\"Read the data into a DataFrame\"\n                    code=\"df=pd.read_csv('./data/news.csv')\"\n                    code2=\"df.shape\"\n                    code3=\"df.head()\"\n                />\n                <CodeScreenshot\n                    image={Fake_print_head}\n                />\n                <HowIDidIt\n                    title=\"Get the labels from the DataFrame\"\n                    code=\"labels=df.label\"\n                    code2=\"labels.head()\"\n                />\n                <CodeScreenshot\n                    image={Label}\n                />\n                <HowIDidIt\n                    title=\"Split the dataset into training and testing sets.\"\n                    code=\"x_train,x_test,y_train,y_test=train_test_split(df['text'], labels, test_size=0.2, random_state=7)\"\n                />\n                <HowIDidIt\n                    title=\"Let’s initialize a TfidfVectorizer with stop words from the English language\n                     and a maximum document frequency of 0.7 (terms with a higher document frequency will be discarded).\n                      Stop words are the most common words in a language that are to be filtered out before processing the natural language data.\n                      And a TfidfVectorizer turns a collection of raw documents into a matrix of TF-IDF features.\"\n                />\n                <HowIDidIt\n                    title=\"Now, fit and transform the vectorizer on the train set, and transform the vectorizer on the test set\"\n                    code=\"tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)\"\n                    code2=\"tfidf_train=tfidf_vectorizer.fit_transform(x_train)\"\n                    code3=\"tfidf_test=tfidf_vectorizer.transform(x_test)\"\n                />\n                <HowIDidIt\n                    title=\"Next, we’ll initialize a PassiveAggressiveClassifier. We’ll fit this on tfidf_train and y_train.\n                    Then, we’ll predict on the test set from the TfidfVectorizer\n                    and calculate the accuracy with accuracy_score() from sklearn.metrics.\"\n                    code=\"pac=PassiveAggressiveClassifier(max_iter=50)\"\n                    code2=\"pac.fit(tfidf_train,y_train)\"\n                    code3=\"y_pred=pac.predict(tfidf_test)\"\n                    code4=\"score=accuracy_score(y_test,y_pred)\"\n                    code5=\"print(f'Accuracy: {round(score*100,2)}%')\"\n                />\n                <HowIDidIt\n                    title=\"We got an accuracy of 92.74% with this model.\n                    Finally, let’s print out a confusion matrix to gain insight into the number of\n                    false and true negatives and positives.\"\n                    code=\"confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])\"\n                />\n                <CodeScreenshot\n                m={10}\n                    image={Accuracy}\n                />\n            </Box>\n        </Box>\n    )\n}\n\nexport default FakeNewsDetector;"]},"metadata":{},"sourceType":"module"}